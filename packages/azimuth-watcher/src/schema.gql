directive @cacheControl(maxAge: Int, inheritMaxAge: Boolean, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

scalar BigInt

scalar BigDecimal

scalar Bytes

type Proof {
  data: String!
}

type _Block_ {
  cid: String
  hash: String!
  number: Int!
  timestamp: Int!
  parentHash: String!
}

type _Transaction_ {
  hash: String!
  index: Int!
  from: String!
  to: String!
}

type ResultEvent {
  block: _Block_!
  tx: _Transaction_!
  contract: String!
  eventIndex: Int!
  event: Event!
  proof: Proof
}

union Event = OwnerChangedEvent | ActivatedEvent | SpawnedEvent | EscapeRequestedEvent | EscapeCanceledEvent | EscapeAcceptedEvent | LostSponsorEvent | ChangedKeysEvent | BrokeContinuityEvent | ChangedSpawnProxyEvent | ChangedTransferProxyEvent | ChangedManagementProxyEvent | ChangedVotingProxyEvent | ChangedDnsEvent | OwnershipRenouncedEvent | OwnershipTransferredEvent

type OwnerChangedEvent {
  point: BigInt!
  owner: String!
}

type ActivatedEvent {
  point: BigInt!
}

type SpawnedEvent {
  prefix: BigInt!
  child: BigInt!
}

type EscapeRequestedEvent {
  point: BigInt!
  sponsor: BigInt!
}

type EscapeCanceledEvent {
  point: BigInt!
  sponsor: BigInt!
}

type EscapeAcceptedEvent {
  point: BigInt!
  sponsor: BigInt!
}

type LostSponsorEvent {
  point: BigInt!
  sponsor: BigInt!
}

type ChangedKeysEvent {
  point: BigInt!
  encryptionKey: String!
  authenticationKey: String!
  cryptoSuiteVersion: BigInt!
  keyRevisionNumber: BigInt!
}

type BrokeContinuityEvent {
  point: BigInt!
  number: BigInt!
}

type ChangedSpawnProxyEvent {
  point: BigInt!
  spawnProxy: String!
}

type ChangedTransferProxyEvent {
  point: BigInt!
  transferProxy: String!
}

type ChangedManagementProxyEvent {
  point: BigInt!
  managementProxy: String!
}

type ChangedVotingProxyEvent {
  point: BigInt!
  votingProxy: String!
}

type ChangedDnsEvent {
  primary: String!
  secondary: String!
  tertiary: String!
}

type OwnershipRenouncedEvent {
  previousOwner: String!
}

type OwnershipTransferredEvent {
  previousOwner: String!
  newOwner: String!
}

type ResultBoolean {
  value: Boolean!
  proof: Proof
}

type ResultGetKeysType {
  value: GetKeysType!
  proof: Proof
}

type GetKeysType {
  value0: String!
  value1: String!
  value2: BigInt!
  value3: BigInt!
}

type ResultBigInt {
  value: BigInt!
  proof: Proof
}

type ResultBigIntArray {
  value: [BigInt!]!
  proof: Proof
}

type ResultString {
  value: String!
  proof: Proof
}

type ResultState {
  block: _Block_!
  contractAddress: String!
  cid: String!
  kind: String!
  data: String!
}

type SyncStatus {
  latestIndexedBlockHash: String!
  latestIndexedBlockNumber: Int!
  latestCanonicalBlockHash: String!
  latestCanonicalBlockNumber: Int!
  initialIndexedBlockHash: String!
  initialIndexedBlockNumber: Int!
  latestProcessedBlockHash: String!
  latestProcessedBlockNumber: Int!
}

type Query {
  events(blockHash: String!, contractAddress: String!, name: String): [ResultEvent!]
  eventsInRange(fromBlockNumber: Int!, toBlockNumber: Int!, name: String): [ResultEvent!]
  isActive(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultBoolean!
  getKeys(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultGetKeysType!
  getKeyRevisionNumber(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultBigInt!
  hasBeenLinked(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultBoolean!
  isLive(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultBoolean!
  getContinuityNumber(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultBigInt!
  getSpawnCount(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultBigInt!
  getSpawned(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultBigIntArray!
  hasSponsor(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultBoolean!
  getSponsor(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultBigInt!
  isSponsor(blockHash: String!, contractAddress: String!, _point: BigInt!, _sponsor: BigInt!): ResultBoolean!
  getSponsoringCount(blockHash: String!, contractAddress: String!, _sponsor: BigInt!): ResultBigInt!
  getSponsoring(blockHash: String!, contractAddress: String!, _sponsor: BigInt!): ResultBigIntArray!
  isEscaping(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultBoolean!
  getEscapeRequest(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultBigInt!
  isRequestingEscapeTo(blockHash: String!, contractAddress: String!, _point: BigInt!, _sponsor: BigInt!): ResultBoolean!
  getEscapeRequestsCount(blockHash: String!, contractAddress: String!, _sponsor: BigInt!): ResultBigInt!
  getEscapeRequests(blockHash: String!, contractAddress: String!, _sponsor: BigInt!): ResultBigIntArray!
  getOwner(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultString!
  isOwner(blockHash: String!, contractAddress: String!, _point: BigInt!, _address: String!): ResultBoolean!
  getOwnedPointCount(blockHash: String!, contractAddress: String!, _whose: String!): ResultBigInt!
  getOwnedPoints(blockHash: String!, contractAddress: String!, _whose: String!): ResultBigIntArray!
  getOwnedPointAtIndex(blockHash: String!, contractAddress: String!, _whose: String!, _index: BigInt!): ResultBigInt!
  getManagementProxy(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultString!
  isManagementProxy(blockHash: String!, contractAddress: String!, _point: BigInt!, _proxy: String!): ResultBoolean!
  canManage(blockHash: String!, contractAddress: String!, _point: BigInt!, _who: String!): ResultBoolean!
  getManagerForCount(blockHash: String!, contractAddress: String!, _proxy: String!): ResultBigInt!
  getManagerFor(blockHash: String!, contractAddress: String!, _proxy: String!): ResultBigIntArray!
  getSpawnProxy(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultString!
  isSpawnProxy(blockHash: String!, contractAddress: String!, _point: BigInt!, _proxy: String!): ResultBoolean!
  canSpawnAs(blockHash: String!, contractAddress: String!, _point: BigInt!, _who: String!): ResultBoolean!
  getSpawningForCount(blockHash: String!, contractAddress: String!, _proxy: String!): ResultBigInt!
  getSpawningFor(blockHash: String!, contractAddress: String!, _proxy: String!): ResultBigIntArray!
  getVotingProxy(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultString!
  isVotingProxy(blockHash: String!, contractAddress: String!, _point: BigInt!, _proxy: String!): ResultBoolean!
  canVoteAs(blockHash: String!, contractAddress: String!, _point: BigInt!, _who: String!): ResultBoolean!
  getVotingForCount(blockHash: String!, contractAddress: String!, _proxy: String!): ResultBigInt!
  getVotingFor(blockHash: String!, contractAddress: String!, _proxy: String!): ResultBigIntArray!
  getTransferProxy(blockHash: String!, contractAddress: String!, _point: BigInt!): ResultString!
  isTransferProxy(blockHash: String!, contractAddress: String!, _point: BigInt!, _proxy: String!): ResultBoolean!
  canTransfer(blockHash: String!, contractAddress: String!, _point: BigInt!, _who: String!): ResultBoolean!
  getTransferringForCount(blockHash: String!, contractAddress: String!, _proxy: String!): ResultBigInt!
  getTransferringFor(blockHash: String!, contractAddress: String!, _proxy: String!): ResultBigIntArray!
  isOperator(blockHash: String!, contractAddress: String!, _owner: String!, _operator: String!): ResultBoolean!
  getStateByCID(cid: String!): ResultState
  getState(blockHash: String!, contractAddress: String!, kind: String): ResultState
  getSyncStatus: SyncStatus
}

type Mutation {
  watchContract(address: String!, kind: String!, checkpoint: Boolean!, startingBlock: Int): Boolean!
}

type Subscription {
  onEvent: ResultEvent!
}
