directive @cacheControl(maxAge: Int, inheritMaxAge: Boolean, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

scalar BigInt

scalar BigDecimal

scalar Bytes

type Proof {
  data: String!
}

type _Block_ {
  cid: String
  hash: String!
  number: Int!
  timestamp: Int!
  parentHash: String!
}

type _Transaction_ {
  hash: String!
  index: Int!
  from: String!
  to: String!
}

type ResultEvent {
  block: _Block_!
  tx: _Transaction_!
  contract: String!
  eventIndex: Int!
  event: Event!
  proof: Proof
}

union Event = TransferEvent | ApprovalEvent | ApprovalForAllEvent | UpgradedEvent | OwnershipRenouncedEvent | OwnershipTransferredEvent

type TransferEvent {
  _from: String!
  _to: String!
  _tokenId: BigInt!
}

type ApprovalEvent {
  _owner: String!
  _approved: String!
  _tokenId: BigInt!
}

type ApprovalForAllEvent {
  _owner: String!
  _operator: String!
  _approved: Boolean!
}

type UpgradedEvent {
  to: String!
}

type OwnershipRenouncedEvent {
  previousOwner: String!
}

type OwnershipTransferredEvent {
  previousOwner: String!
  newOwner: String!
}

type ResultBoolean {
  value: Boolean!
  proof: Proof
}

type ResultString {
  value: String!
  proof: Proof
}

type ResultBigInt {
  value: BigInt!
  proof: Proof
}

type ResultState {
  block: _Block_!
  contractAddress: String!
  cid: String!
  kind: String!
  data: String!
}

type SyncStatus {
  latestIndexedBlockHash: String!
  latestIndexedBlockNumber: Int!
  latestCanonicalBlockHash: String!
  latestCanonicalBlockNumber: Int!
  initialIndexedBlockHash: String!
  initialIndexedBlockNumber: Int!
  latestProcessedBlockHash: String!
  latestProcessedBlockNumber: Int!
}

type Query {
  events(blockHash: String!, contractAddress: String!, name: String): [ResultEvent!]
  eventsInRange(fromBlockNumber: Int!, toBlockNumber: Int!, name: String): [ResultEvent!]
  supportsInterface(blockHash: String!, contractAddress: String!, _interfaceId: String!): ResultBoolean!
  name(blockHash: String!, contractAddress: String!): ResultString!
  symbol(blockHash: String!, contractAddress: String!): ResultString!
  tokenURI(blockHash: String!, contractAddress: String!, _tokenId: BigInt!): ResultString!
  balanceOf(blockHash: String!, contractAddress: String!, _owner: String!): ResultBigInt!
  ownerOf(blockHash: String!, contractAddress: String!, _tokenId: BigInt!): ResultString!
  exists(blockHash: String!, contractAddress: String!, _tokenId: BigInt!): ResultBoolean!
  getApproved(blockHash: String!, contractAddress: String!, _tokenId: BigInt!): ResultString!
  isApprovedForAll(blockHash: String!, contractAddress: String!, _owner: String!, _operator: String!): ResultBoolean!
  getSpawnLimit(blockHash: String!, contractAddress: String!, _point: BigInt!, _time: BigInt!): ResultBigInt!
  canEscapeTo(blockHash: String!, contractAddress: String!, _point: BigInt!, _sponsor: BigInt!): ResultBoolean!
  getStateByCID(cid: String!): ResultState
  getState(blockHash: String!, contractAddress: String!, kind: String): ResultState
  getSyncStatus: SyncStatus
}

type Mutation {
  watchContract(address: String!, kind: String!, checkpoint: Boolean!, startingBlock: Int): Boolean!
}

type Subscription {
  onEvent: ResultEvent!
}
